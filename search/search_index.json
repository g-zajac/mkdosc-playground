{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Skycharge internal documentation This page is about internal documentation where you can find clearly detailed processes and procedures for the internal team members. The aim is to get all the knowledge together in one place.","title":"About"},{"location":"#welcome-to-skycharge-internal-documentation","text":"This page is about internal documentation where you can find clearly detailed processes and procedures for the internal team members. The aim is to get all the knowledge together in one place.","title":"Welcome to Skycharge internal documentation"},{"location":"bb-pkgs/","text":"Beaglebone Skycharge Packages So the procedure is the following on BB: Install public key wget -O - -q http://install.skycharge.de/debian/pubkey.gpg | apt-key add - Add skycharge repo to the repos list echo \"deb http://install.skycharge.de/debian stretch main\" > /etc/apt/sources.list.d/skycharge.list Update BB repos cache apt update Now install all the packages from the web apt install skysense-conf skysensed skysense-cli Helper commands List available versions apt-cache policy skysense* Or install particular version apt install skysensed=1.2.1 Script for allowing flashed bbone to execute simple script and selfinstall. /usr/local/bin/selfinstall.sh launched in rc.local: #!/bin/bash FLAG = \"/var/log/firstboot.log\" if [ ! -f $FLAG ] ; then #all commands here #the next line creates an empty file so it won't run the next boot touch $FLAG else echo \"Do nothing\" fi","title":"Beaglebone packages"},{"location":"bb-pkgs/#beaglebone-skycharge-packages","text":"So the procedure is the following on BB: Install public key wget -O - -q http://install.skycharge.de/debian/pubkey.gpg | apt-key add - Add skycharge repo to the repos list echo \"deb http://install.skycharge.de/debian stretch main\" > /etc/apt/sources.list.d/skycharge.list Update BB repos cache apt update Now install all the packages from the web apt install skysense-conf skysensed skysense-cli","title":"Beaglebone Skycharge Packages"},{"location":"bb-pkgs/#helper-commands","text":"List available versions apt-cache policy skysense* Or install particular version apt install skysensed=1.2.1","title":"Helper commands"},{"location":"bb-pkgs/#script-for-allowing-flashed-bbone-to-execute-simple-script-and-selfinstall-usrlocalbinselfinstallsh-launched-in-rclocal","text":"#!/bin/bash FLAG = \"/var/log/firstboot.log\" if [ ! -f $FLAG ] ; then #all commands here #the next line creates an empty file so it won't run the next boot touch $FLAG else echo \"Do nothing\" fi","title":"Script for allowing flashed bbone to execute simple script and selfinstall. /usr/local/bin/selfinstall.sh launched in rc.local:"},{"location":"cloneSD/","text":"Cloning SD card Instruction to clone a SD card, used for backup of the Skycharge installation image. The process run on Mac in terminal. Inser the SD card, make sure it is the same siye or bigger then the source SD card. Attach and identify the source disk diskutil list Unmount the source disk diskutil unmountDisk /dev/disk2 The DD tool is used for cloning. Copy the source disk to the desktop sudo dd if = /dev/rdisk2 of = /Users/production/diskimage.img bs = 16M Info if (input file) and of (output file) Warning There is no progress indicator while the dd is cloning the card and it can be very long. To sovle the lack of progres the pv tool can be installed and added. pv - Pipe Viewer - is a terminal-based tool for monitoring the progress of data through a pipeline brew install pv now the dd can be run with progress indication dd if = /dev/rdisk2 | pv | of = /Users/production/skycharge_sd_backup.img bs = 16M if the size of image is now it can be applied dd if = /dev/rdisk2 | pv -s 16G | of = /Users/production/skycharge_sd_backup.img bs = 16M expected oustcome: 1.61GiB 0:12:19 [2.82MiB/s] [===> ] 10% ETA 1:50:25 Remove the card after finished process. Attach and identify the destination disk diskutil list Unmount the destination disk diskutil unmountDisk /dev/disk2 Copy the image to the destination disk sudo dd if = /Users/production/sd_backup.dmg | pv -s 16G | sudo dd of = /dev/disk2","title":"Cloning SD card"},{"location":"cloneSD/#cloning-sd-card","text":"Instruction to clone a SD card, used for backup of the Skycharge installation image. The process run on Mac in terminal. Inser the SD card, make sure it is the same siye or bigger then the source SD card. Attach and identify the source disk diskutil list Unmount the source disk diskutil unmountDisk /dev/disk2 The DD tool is used for cloning. Copy the source disk to the desktop sudo dd if = /dev/rdisk2 of = /Users/production/diskimage.img bs = 16M Info if (input file) and of (output file) Warning There is no progress indicator while the dd is cloning the card and it can be very long. To sovle the lack of progres the pv tool can be installed and added. pv - Pipe Viewer - is a terminal-based tool for monitoring the progress of data through a pipeline brew install pv now the dd can be run with progress indication dd if = /dev/rdisk2 | pv | of = /Users/production/skycharge_sd_backup.img bs = 16M if the size of image is now it can be applied dd if = /dev/rdisk2 | pv -s 16G | of = /Users/production/skycharge_sd_backup.img bs = 16M expected oustcome: 1.61GiB 0:12:19 [2.82MiB/s] [===> ] 10% ETA 1:50:25 Remove the card after finished process. Attach and identify the destination disk diskutil list Unmount the destination disk diskutil unmountDisk /dev/disk2 Copy the image to the destination disk sudo dd if = /Users/production/sd_backup.dmg | pv -s 16G | sudo dd of = /dev/disk2","title":"Cloning SD card"},{"location":"debian-update/","text":"Updateing Debian on Beaglebone The Skycharge card image used to flash new Beaglebone is based on Debian 9 Stretch which has reached the end of life but it is still supported. More info about Debian verisions here . The update procedure was carried for Fortem in Septebmeber 2022. Warning Skycharge packeges work after the update but they have not been fully tested. Prepare Beaglebone Flash brand new Beaglebone with Skycharge SD card as per regular build. Restart and log in via ssh and follow steps below. The upgrade is done via apt upgrade on existing and running system with preinstalled Skychage packages. The upgrade steps: To check current linux version run: cat /etc/*release #(1) The response should look as follows: PRETTY_NAME = \"Debian GNU/Linux 9 (stretch)\" NAME = \"Debian GNU/Linux\" VERSION_ID = \"9\" VERSION = \"9 (stretch)\" ID = debian HOME_URL = \"https://www.debian.org/\" SUPPORT_URL = \"https://www.debian.org/support\" BUG_REPORT_URL = \"https://bugs.debian.org/\" optional: lsb_release -a cat /etc/debian_version Preparing space on flash disk To run update some space on flash is needed for downloading new packages. To check available space on Beaglebone run df -h should have about 77% on / To update Debian 9 to debian 10 please edit the file /etc/apt/sources.list using a text editor (i.e: vim, nano) and replace each instance of stretch with buster. Before updating please run \u00b4apt install dirmngr\u00b4 explanation in next paragraph. apt update If you got missing GPG signatures then install missing network certificate management service (this should be done before apt update as it is stretch package). apt install dirmngr And add missing keys (listed in error message) with: apt-key adv --keyserver keyserver.ubuntu.com --recv-keys <missing_key> Then run update again, this time should run without any errors: apt update Minimal system upgrade The minimal system upgrade can be useful when the system is tight on space and a full upgrade cannot be run due to space constraints. Detailed information here 4.4.3. Make sure you have sufficient space for the upgrade apt upgrade --without-new-pkgs There will be an error: \u2026run out of space The Beagle bone does not have enough flash to run the system upgrade, workaround: apt autoremove apt clean To save space, there are still some files which can be removed: rm -fR /var/lib/cloud9 rm -fR /var/lib/cloud9_backup_examples/ rm -fR /usr/local/lib/node_modules/ rm -fR /lib/firmware/iwlwifi* rm -fR /usr/share/bone101/examples/extras/bacon_cape rm -fR /opt/scripts/device/bbai Checking available space: df -h If it is still not enough, you can add external usb drive or card for /var/cache/apt/archives/ any package needed for installation that is fetched from the network is stored in /var/cache/apt/archives (and the partial/ subdirectory, during download), so you must make sure you have enough space on the file system partition that holds /var/ to temporarily download the packages that will be installed in your system Adding temporary external drive (SD card) to extend flash To add external USB drive or SD card, list external drives and find the name, in my case mmcblk0 fdisk -l A SD card formatted to EXT4 has been used. To prepare the SD card: mkfs.ext4 /dev/mmcblk0 To mount the SD card: mkdir /mnt/external mount -t ext4 /dev/mmcblk0 /mnt/external/ Copy the directory /var/cache/apt/archives to the card cp -ax /var/cache/apt/archives /mnt/external/ Mount the temporary cache directory on the current one: mount --bind /mnt/external/archives /var/cache/apt/archives After the upgrade, restore the original /var/cache/apt/archives directory: umount /var/cache/apt/archives The command df -h should show the external drive with mounted filesystem Upgrade Now run the upgrade: apt upgrade --without-new-pkgs Once the update finishes you can check linux version: cat /etc/*release # (1) Should receive: PRETTY_NAME = \"Debian GNU/Linux 10 (buster)\" NAME = \"Debian GNU/Linux\" VERSION_ID = \"10\" VERSION = \"10 (buster)\" VERSION_CODENAME = buster ID = debian HOME_URL = \"https://www.debian.org/\" SUPPORT_URL = \"https://www.debian.org/support\" BUG_REPORT_URL = \"https://bugs.debian.org/\" reboot","title":"Updating Debian"},{"location":"debian-update/#updateing-debian-on-beaglebone","text":"The Skycharge card image used to flash new Beaglebone is based on Debian 9 Stretch which has reached the end of life but it is still supported. More info about Debian verisions here . The update procedure was carried for Fortem in Septebmeber 2022. Warning Skycharge packeges work after the update but they have not been fully tested.","title":"Updateing Debian on Beaglebone"},{"location":"debian-update/#prepare-beaglebone","text":"Flash brand new Beaglebone with Skycharge SD card as per regular build. Restart and log in via ssh and follow steps below. The upgrade is done via apt upgrade on existing and running system with preinstalled Skychage packages. The upgrade steps: To check current linux version run: cat /etc/*release #(1) The response should look as follows: PRETTY_NAME = \"Debian GNU/Linux 9 (stretch)\" NAME = \"Debian GNU/Linux\" VERSION_ID = \"9\" VERSION = \"9 (stretch)\" ID = debian HOME_URL = \"https://www.debian.org/\" SUPPORT_URL = \"https://www.debian.org/support\" BUG_REPORT_URL = \"https://bugs.debian.org/\" optional: lsb_release -a cat /etc/debian_version","title":"Prepare Beaglebone"},{"location":"debian-update/#preparing-space-on-flash-disk","text":"To run update some space on flash is needed for downloading new packages. To check available space on Beaglebone run df -h should have about 77% on / To update Debian 9 to debian 10 please edit the file /etc/apt/sources.list using a text editor (i.e: vim, nano) and replace each instance of stretch with buster. Before updating please run \u00b4apt install dirmngr\u00b4 explanation in next paragraph. apt update If you got missing GPG signatures then install missing network certificate management service (this should be done before apt update as it is stretch package). apt install dirmngr And add missing keys (listed in error message) with: apt-key adv --keyserver keyserver.ubuntu.com --recv-keys <missing_key> Then run update again, this time should run without any errors: apt update","title":"Preparing space on flash disk"},{"location":"debian-update/#minimal-system-upgrade","text":"The minimal system upgrade can be useful when the system is tight on space and a full upgrade cannot be run due to space constraints. Detailed information here 4.4.3. Make sure you have sufficient space for the upgrade apt upgrade --without-new-pkgs There will be an error: \u2026run out of space The Beagle bone does not have enough flash to run the system upgrade, workaround: apt autoremove apt clean To save space, there are still some files which can be removed: rm -fR /var/lib/cloud9 rm -fR /var/lib/cloud9_backup_examples/ rm -fR /usr/local/lib/node_modules/ rm -fR /lib/firmware/iwlwifi* rm -fR /usr/share/bone101/examples/extras/bacon_cape rm -fR /opt/scripts/device/bbai Checking available space: df -h If it is still not enough, you can add external usb drive or card for /var/cache/apt/archives/ any package needed for installation that is fetched from the network is stored in /var/cache/apt/archives (and the partial/ subdirectory, during download), so you must make sure you have enough space on the file system partition that holds /var/ to temporarily download the packages that will be installed in your system","title":"Minimal system upgrade"},{"location":"debian-update/#adding-temporary-external-drive-sd-card-to-extend-flash","text":"To add external USB drive or SD card, list external drives and find the name, in my case mmcblk0 fdisk -l A SD card formatted to EXT4 has been used. To prepare the SD card: mkfs.ext4 /dev/mmcblk0 To mount the SD card: mkdir /mnt/external mount -t ext4 /dev/mmcblk0 /mnt/external/ Copy the directory /var/cache/apt/archives to the card cp -ax /var/cache/apt/archives /mnt/external/ Mount the temporary cache directory on the current one: mount --bind /mnt/external/archives /var/cache/apt/archives After the upgrade, restore the original /var/cache/apt/archives directory: umount /var/cache/apt/archives The command df -h should show the external drive with mounted filesystem","title":"Adding temporary external drive (SD card) to extend flash"},{"location":"debian-update/#upgrade","text":"Now run the upgrade: apt upgrade --without-new-pkgs Once the update finishes you can check linux version: cat /etc/*release # (1) Should receive: PRETTY_NAME = \"Debian GNU/Linux 10 (buster)\" NAME = \"Debian GNU/Linux\" VERSION_ID = \"10\" VERSION = \"10 (buster)\" VERSION_CODENAME = buster ID = debian HOME_URL = \"https://www.debian.org/\" SUPPORT_URL = \"https://www.debian.org/support\" BUG_REPORT_URL = \"https://bugs.debian.org/\" reboot","title":"Upgrade"},{"location":"dp-interface/","text":"Charging System with Drone Port To integrate charging system with a droneport, standard system (just a plate without box) is needed with additional interface cable, which allows bi-directional communication. Prcedure order addtional components for building the cable. cut dsub cable in half, strip wires, add heat shrink tube solder wires to header according the table, based om DP specification optionally, activate SDK to remote access and test at CDM Additional components Components required for building the cable interface (Mouser codes): Cable D-Sub kabel DB15M/F CS-DSDMDB15MF-005 For droneport interface only female is neded (charger side) 1 . Header for source board (2x22, 44pins): 7-534206-2 header & wire housing 2x22p The interface Charging System is connected with a Droneport with a cable. One end has D-SUB15, other 44 header pin socket. the D-SUB 15 female plug goes to Droneport controller. the 44pin socket goes to pin header located next to BB on the source PCB. Wireing table Beaglebone interface Beaglebone gpio pin Cable color 1 D-SUB pin D-SUB connector dp-is-closed-pin gpio66 ----- pin 9 Gate is close (3.3v, status) dp-in-progress-pin gpio67 ----- pin 10 Gate is opening/closing (3.3v, status) dp-is-drone-detected-pin gpio69 -- / -- pin 13 Drone on the pad dp-is-opened-pin gpio68 ----- pin 8 Gate is open (3.3v, status) dp-open-pin gpio45 ----- pin 3 Open gate (3.3v, >=100mS) dp-close-pin gpio44 ----- pin 4 Close gate (3.3v, >=100mS) dp-is-landing-err-pin gpio23 NC dp-is-ready-pin gpio26 ----- pin 12 Automa\udbff\udc00on in auto and ready (3.3v, status) Assembled cable Add drone port config to the config file To enable Drone Port interface the GPIO section needs to be added to the skycharge config file. Login remotly to a charging system with ssh and edit the file: nano /etc/skycharge.conf on the bottom add lines: # # DronePort configuration # dp-hw-interface = gpio dp-is-closed-pin = P8.07 # gpio66 dp-in-progress-pin = P8.08 # gpio67 dp-is-drone-detected-pin = P8.09 # gpio69 dp-is-opened-pin = P8.10 # gpio68 dp-open-pin = P8.11 # gpio45 dp-close-pin = P8.12 # gpio44 dp-is-landing-err-pin = P8.13 # gpio23 dp-is-ready-pin = P8.14 # gpio26 Detailed description of the config can be found here . Restart the skycharge deamon: systemctl restart skycharged To test the droneport config run: skycharge-cli show-droneport-state Cable CS-DSDMDB15MF-005 from Mouser, this is extension cable, cut in half female part used for interface, male part used for tester. For future orders female-female cable should be ordered. Core colors refers to this cable. \u21a9 \u21a9","title":"DP interface"},{"location":"dp-interface/#charging-system-with-drone-port","text":"To integrate charging system with a droneport, standard system (just a plate without box) is needed with additional interface cable, which allows bi-directional communication. Prcedure order addtional components for building the cable. cut dsub cable in half, strip wires, add heat shrink tube solder wires to header according the table, based om DP specification optionally, activate SDK to remote access and test at CDM","title":"Charging System with Drone Port"},{"location":"dp-interface/#additional-components","text":"Components required for building the cable interface (Mouser codes): Cable D-Sub kabel DB15M/F CS-DSDMDB15MF-005 For droneport interface only female is neded (charger side) 1 . Header for source board (2x22, 44pins): 7-534206-2 header & wire housing 2x22p","title":"Additional components"},{"location":"dp-interface/#the-interface","text":"Charging System is connected with a Droneport with a cable. One end has D-SUB15, other 44 header pin socket. the D-SUB 15 female plug goes to Droneport controller. the 44pin socket goes to pin header located next to BB on the source PCB.","title":"The interface"},{"location":"dp-interface/#wireing-table","text":"Beaglebone interface Beaglebone gpio pin Cable color 1 D-SUB pin D-SUB connector dp-is-closed-pin gpio66 ----- pin 9 Gate is close (3.3v, status) dp-in-progress-pin gpio67 ----- pin 10 Gate is opening/closing (3.3v, status) dp-is-drone-detected-pin gpio69 -- / -- pin 13 Drone on the pad dp-is-opened-pin gpio68 ----- pin 8 Gate is open (3.3v, status) dp-open-pin gpio45 ----- pin 3 Open gate (3.3v, >=100mS) dp-close-pin gpio44 ----- pin 4 Close gate (3.3v, >=100mS) dp-is-landing-err-pin gpio23 NC dp-is-ready-pin gpio26 ----- pin 12 Automa\udbff\udc00on in auto and ready (3.3v, status)","title":"Wireing table"},{"location":"dp-interface/#assembled-cable","text":"","title":"Assembled cable"},{"location":"dp-interface/#add-drone-port-config-to-the-config-file","text":"To enable Drone Port interface the GPIO section needs to be added to the skycharge config file. Login remotly to a charging system with ssh and edit the file: nano /etc/skycharge.conf on the bottom add lines: # # DronePort configuration # dp-hw-interface = gpio dp-is-closed-pin = P8.07 # gpio66 dp-in-progress-pin = P8.08 # gpio67 dp-is-drone-detected-pin = P8.09 # gpio69 dp-is-opened-pin = P8.10 # gpio68 dp-open-pin = P8.11 # gpio45 dp-close-pin = P8.12 # gpio44 dp-is-landing-err-pin = P8.13 # gpio23 dp-is-ready-pin = P8.14 # gpio26 Detailed description of the config can be found here . Restart the skycharge deamon: systemctl restart skycharged To test the droneport config run: skycharge-cli show-droneport-state Cable CS-DSDMDB15MF-005 from Mouser, this is extension cable, cut in half female part used for interface, male part used for tester. For future orders female-female cable should be ordered. Core colors refers to this cable. \u21a9 \u21a9","title":"Add drone port config to the config file"},{"location":"flashPLC/","text":"Flashing PLC Connect to USB the ST-link and wire it to a sink PLC with 4 wires: - 3V3 - GND - CLK - DIO Run: cd /devel/skycharge/hw2/skysink/firmware make flash-hw-version HW_VERSION = 1 .2.0 st-info \u2014probe st-flash make flash","title":"FlashingPLC"},{"location":"flashPLC/#flashing-plc","text":"Connect to USB the ST-link and wire it to a sink PLC with 4 wires: - 3V3 - GND - CLK - DIO Run: cd /devel/skycharge/hw2/skysink/firmware make flash-hw-version HW_VERSION = 1 .2.0 st-info \u2014probe st-flash make flash","title":"Flashing PLC"},{"location":"labels/","text":"Printing labels To generate a label for a device skyzeroconf/generate-label.py --label-printer Brother_QL_820NWB --device-name <name> --device-uuid <uuid> --output-path <path> Device name and device uuid can be copied from the config file. To prin a label: lpr -P Brother_QL_820NWB -o landscape path-to-the-label.pdf all generated labels should be in customers folder","title":"Printing labels"},{"location":"labels/#printing-labels","text":"To generate a label for a device skyzeroconf/generate-label.py --label-printer Brother_QL_820NWB --device-name <name> --device-uuid <uuid> --output-path <path> Device name and device uuid can be copied from the config file. To prin a label: lpr -P Brother_QL_820NWB -o landscape path-to-the-label.pdf all generated labels should be in customers folder","title":"Printing labels"},{"location":"meanwellPS/","text":"Meanwell Power Supplies To select the right power supply for an application please check the voltage and curent range in documentation. Skycharge System use programmable mode and the voltage and current range is different then in factory default mode when the programming is not activated. In the programming mode in addition to the adjustment via the built-in potentiometer, the output voltage can be trimmed to 40~110% (depending from the PS specification/model, check the table below) of the nominal voltage by applying EXTERNAL VOLTAGE. Adjustment of constant current level is allowable to: 40 ~ 110% of rated current for RSP-750 20 ~ 100% of rated current for RSP-1600 RSP-750-48 Type Output V Range Nominal Voltage Min Voltage Max Voltage Current RSP-750-5 40 - 110% 5V 2V 5.5V 100A RSP-750-12 40 - 110% 12V 4.8V 13.2V 62.5A RSP-750-15 40 - 110% 15V 6V 16.5V 50A RSP-750-24 40 - 110% 24V 9,6V 26.4V 31.3A RSP-750-27 40 - 110% 27V 10.8V 29.7V 27.8A RSP-750-48 40 - 110% 48V 19,2V 52.8V 15.7A We use RSP-750-48 RSP-1600-48 The Meanwell (RSP-1600-48) Type Output V Range Nominal Voltage Min Voltage Max Voltage Current RSP-1600-12 60 - 125% 12V 7.2V 15V 125A RSP-1600-24 40 - 125% 24V 9,6V 30V 67A RSP-1600-27 40 - 125% 27V 10.8V 34.75V 59A RSP-1600-36 40 - 125% 36V 14.4V 45V 44.5A RSP-1600-48 40 - 125% 48V 19,2V 60V 33.5A Practicly we should use mainly RSP-1600-48 unless the battery specs need lower voltage then 19.2V. The hardware will not be able to handle more then 30A so the power of lower voltage models will not be utilized.","title":"Meanwell PS"},{"location":"meanwellPS/#meanwell-power-supplies","text":"To select the right power supply for an application please check the voltage and curent range in documentation. Skycharge System use programmable mode and the voltage and current range is different then in factory default mode when the programming is not activated. In the programming mode in addition to the adjustment via the built-in potentiometer, the output voltage can be trimmed to 40~110% (depending from the PS specification/model, check the table below) of the nominal voltage by applying EXTERNAL VOLTAGE. Adjustment of constant current level is allowable to: 40 ~ 110% of rated current for RSP-750 20 ~ 100% of rated current for RSP-1600","title":"Meanwell Power Supplies"},{"location":"meanwellPS/#rsp-750-48","text":"Type Output V Range Nominal Voltage Min Voltage Max Voltage Current RSP-750-5 40 - 110% 5V 2V 5.5V 100A RSP-750-12 40 - 110% 12V 4.8V 13.2V 62.5A RSP-750-15 40 - 110% 15V 6V 16.5V 50A RSP-750-24 40 - 110% 24V 9,6V 26.4V 31.3A RSP-750-27 40 - 110% 27V 10.8V 29.7V 27.8A RSP-750-48 40 - 110% 48V 19,2V 52.8V 15.7A We use RSP-750-48","title":"RSP-750-48"},{"location":"meanwellPS/#rsp-1600-48","text":"The Meanwell (RSP-1600-48) Type Output V Range Nominal Voltage Min Voltage Max Voltage Current RSP-1600-12 60 - 125% 12V 7.2V 15V 125A RSP-1600-24 40 - 125% 24V 9,6V 30V 67A RSP-1600-27 40 - 125% 27V 10.8V 34.75V 59A RSP-1600-36 40 - 125% 36V 14.4V 45V 44.5A RSP-1600-48 40 - 125% 48V 19,2V 60V 33.5A Practicly we should use mainly RSP-1600-48 unless the battery specs need lower voltage then 19.2V. The hardware will not be able to handle more then 30A so the power of lower voltage models will not be utilized.","title":"RSP-1600-48"},{"location":"mkdocs-intro/","text":"Documentation system Assumptions easy to write in, edit, focus on content to make the knowledge transfer easy to use open standards like markdown and json, platform independent language the content is decoupled from code and can be used with various tools, frameworks to generate document searchable, easly render to static webpage, pdf version control for colaboration and tracking mistakes and bugs staging with previewing before publishing host enywhere, i.e github, s3 etc open source, no subscription nor dependecies from 3rd party apps Tools chosen for creating this document: MkDocs - the static-site generator MkDOcs Material - to make the documentation look good Introduction The documentation is written in markdown. Markdown is a lightweight markup language for creating formatted text using a plain-text editor. It doesn\u2019t do anything fancy like change the font size, color, or type \u2014 just the essentials, using keyboard symbols you already know. The markdown content is processsed by MkDocs to generate a static site. Local installation Installation of mkdocs on local machine so you can edit the docs code and preview it locally without publishing. Not neccecery but helpful if editing the documentation often. For sporadic minor changes github can be used. Requirements Python with packages manager python3 --version python3 -m pip \u2013version If the pip is missing download it by running the following command: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py Install the downloaded package by running: python3 get-pip.py To verify that you have installed pip correctly, check the pip version on your system: pip3 --version Installing MkDocs pip3 install mkdocs check pip3 list | grep mkdocs python3 -m mkdocs ```shel <!-- Add to PATH PATH='/Users/production/Library/Python/3.8/bin' export PATH --> ```shel pip3 install -r mkdocs-material pip3 install mkdocs-material-extensions Using MkDocs in terminal in project folder run: python3 -m mkdocs serve Building from scratch Create a new repository at github where we deploy the documentation, recommended setup: - gitignore for python - MIT licence - add README.md Once created, clone localy on your machine. create requirments.txt (not esential but good practise) with one line mkdocs-material \"mkdocs-material\" > requirments.txt create enviroment (list of comannds below can be put into one script) export _VERSION_ = 3 .8 conda create --prefix ./env python = ${ _VERSION_ } -y source activate ./env pip install -r requirements.txt After the installation you can create the site: mkdocs new . the nactivate the enviroment: conda activate ./env More info how to getting started at Material for MkDocs Publishing static webpage The document can be writen in markdown language and edited in any text editor. When changes are pushed to repository, building action is automaticly triggered and the static website generated and published. flowchart LR A(content in markdown) --> B B(MkDocs) B --> C(static website) The proces is automated with a github. Every time a content or changes are pushed to master branch, it triggers the build flow and publish the static generated page. Changes on development branch, i.e adding and working on text 2, will not triger the build flow and changes will be visible only locally. After merging with master branch, text 1 with additional text 2 will be published. gitGraph commit id: \"init\" commit id: \"add text 1\" branch development checkout development commit id: \"add new text 2\" checkout main commit id: \"change text 1\" checkout development commit id: \"update text 2\" checkout main merge development id: \"merge\" tag: \"text 2 added to text 1\" type: NORMAL commit id: \"-\" commit id: \" \" Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Doc system"},{"location":"mkdocs-intro/#documentation-system","text":"","title":"Documentation system"},{"location":"mkdocs-intro/#assumptions","text":"easy to write in, edit, focus on content to make the knowledge transfer easy to use open standards like markdown and json, platform independent language the content is decoupled from code and can be used with various tools, frameworks to generate document searchable, easly render to static webpage, pdf version control for colaboration and tracking mistakes and bugs staging with previewing before publishing host enywhere, i.e github, s3 etc open source, no subscription nor dependecies from 3rd party apps","title":"Assumptions"},{"location":"mkdocs-intro/#tools-chosen-for-creating-this-document","text":"MkDocs - the static-site generator MkDOcs Material - to make the documentation look good","title":"Tools chosen for creating this document:"},{"location":"mkdocs-intro/#introduction","text":"The documentation is written in markdown. Markdown is a lightweight markup language for creating formatted text using a plain-text editor. It doesn\u2019t do anything fancy like change the font size, color, or type \u2014 just the essentials, using keyboard symbols you already know. The markdown content is processsed by MkDocs to generate a static site.","title":"Introduction"},{"location":"mkdocs-intro/#local-installation","text":"Installation of mkdocs on local machine so you can edit the docs code and preview it locally without publishing. Not neccecery but helpful if editing the documentation often. For sporadic minor changes github can be used.","title":"Local installation"},{"location":"mkdocs-intro/#requirements","text":"Python with packages manager python3 --version python3 -m pip \u2013version If the pip is missing download it by running the following command: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py Install the downloaded package by running: python3 get-pip.py To verify that you have installed pip correctly, check the pip version on your system: pip3 --version","title":"Requirements"},{"location":"mkdocs-intro/#installing-mkdocs","text":"pip3 install mkdocs check pip3 list | grep mkdocs python3 -m mkdocs ```shel <!-- Add to PATH PATH='/Users/production/Library/Python/3.8/bin' export PATH --> ```shel pip3 install -r mkdocs-material pip3 install mkdocs-material-extensions","title":"Installing MkDocs"},{"location":"mkdocs-intro/#using-mkdocs","text":"in terminal in project folder run: python3 -m mkdocs serve","title":"Using MkDocs"},{"location":"mkdocs-intro/#building-from-scratch","text":"Create a new repository at github where we deploy the documentation, recommended setup: - gitignore for python - MIT licence - add README.md Once created, clone localy on your machine. create requirments.txt (not esential but good practise) with one line mkdocs-material \"mkdocs-material\" > requirments.txt create enviroment (list of comannds below can be put into one script) export _VERSION_ = 3 .8 conda create --prefix ./env python = ${ _VERSION_ } -y source activate ./env pip install -r requirements.txt After the installation you can create the site: mkdocs new . the nactivate the enviroment: conda activate ./env More info how to getting started at Material for MkDocs","title":"Building from scratch"},{"location":"mkdocs-intro/#publishing-static-webpage","text":"The document can be writen in markdown language and edited in any text editor. When changes are pushed to repository, building action is automaticly triggered and the static website generated and published. flowchart LR A(content in markdown) --> B B(MkDocs) B --> C(static website) The proces is automated with a github. Every time a content or changes are pushed to master branch, it triggers the build flow and publish the static generated page. Changes on development branch, i.e adding and working on text 2, will not triger the build flow and changes will be visible only locally. After merging with master branch, text 1 with additional text 2 will be published. gitGraph commit id: \"init\" commit id: \"add text 1\" branch development checkout development commit id: \"add new text 2\" checkout main commit id: \"change text 1\" checkout development commit id: \"update text 2\" checkout main merge development id: \"merge\" tag: \"text 2 added to text 1\" type: NORMAL commit id: \"-\" commit id: \" \"","title":"Publishing static webpage"},{"location":"mkdocs-intro/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"newUnit/","text":"Preparing Skycharge System This document is about preparing brand new Skycharge source board with brand new Beaglebone when building a charging system. Starting config server Run on production machine ./skyzeroconf Make sure that the label printer is turned on and connected to ethernet. Flashing BB Insert the SD card with image to the Beaglebone (BB), connect it with etherent with acces to internet and to the machine hosting skyzeroconf. Power the BB up, after a minute or so all blue LEDs on BB should start 'walking' back and forth - flashing. The flashing proces takes about 15mins or so. Once the flashing is complete the leds go off. At the moment there is a bug and the flashing process run twice. During the flashing a label should be automaticly printed. Once the flashing process is completed, the BB LEDs are off, disconnect from power and ethernet Note Remeber to remove the SD card after flashing. First power up Install the BB on the source board. Connect the source board to the 12V board PS and also the Meanwell PS - (essential for calibration process). Power up. Power up the BB, after a minute ish, once it is booted, acces the BB remotly via ssh 1 . ssh -i <path to ssh keys> root@skydevice.local Flashing MCU on source board Flashed BB consists debian system with all skycharge deamons and packages pre-installed. On the source board there is STM microcontroller which need to be flashed with Skycharge firmware when it comes from PCB manufacture. To do so, we can use preinstalled cli tool from BB and run: skymux-flash --hw-version <get the number written on the board i.e 1.3 at the moment, so specify 1.3.0> This will flash the STM microcontrller on the source board. The board may need power cycle (down and up) to be fully functional. System calibration System test Every BB use the same mDNS name skycharge.local, there will be confilict if two or more devices connected. \u21a9","title":"Preparing new charging system"},{"location":"newUnit/#preparing-skycharge-system","text":"This document is about preparing brand new Skycharge source board with brand new Beaglebone when building a charging system.","title":"Preparing Skycharge System"},{"location":"newUnit/#starting-config-server","text":"Run on production machine ./skyzeroconf Make sure that the label printer is turned on and connected to ethernet.","title":"Starting config server"},{"location":"newUnit/#flashing-bb","text":"Insert the SD card with image to the Beaglebone (BB), connect it with etherent with acces to internet and to the machine hosting skyzeroconf. Power the BB up, after a minute or so all blue LEDs on BB should start 'walking' back and forth - flashing. The flashing proces takes about 15mins or so. Once the flashing is complete the leds go off. At the moment there is a bug and the flashing process run twice. During the flashing a label should be automaticly printed. Once the flashing process is completed, the BB LEDs are off, disconnect from power and ethernet Note Remeber to remove the SD card after flashing.","title":"Flashing BB"},{"location":"newUnit/#first-power-up","text":"Install the BB on the source board. Connect the source board to the 12V board PS and also the Meanwell PS - (essential for calibration process). Power up. Power up the BB, after a minute ish, once it is booted, acces the BB remotly via ssh 1 . ssh -i <path to ssh keys> root@skydevice.local","title":"First power up"},{"location":"newUnit/#flashing-mcu-on-source-board","text":"Flashed BB consists debian system with all skycharge deamons and packages pre-installed. On the source board there is STM microcontroller which need to be flashed with Skycharge firmware when it comes from PCB manufacture. To do so, we can use preinstalled cli tool from BB and run: skymux-flash --hw-version <get the number written on the board i.e 1.3 at the moment, so specify 1.3.0> This will flash the STM microcontrller on the source board. The board may need power cycle (down and up) to be fully functional.","title":"Flashing MCU on source board"},{"location":"newUnit/#system-calibration","text":"","title":"System calibration"},{"location":"newUnit/#system-test","text":"Every BB use the same mDNS name skycharge.local, there will be confilict if two or more devices connected. \u21a9","title":"System test"},{"location":"sdk-auth/","text":"Customer registration Skycharge broker has an authentication mechanism for all remote clients, so all customers who need access to the Skycharge cloud SDK have to be registered explicitly and manually (there is no way to register a customer from the Skycharge web cloud unfortunately). Procedure 1) A customer has to create an account on the Skycharge Cloud with common procedure through the email/google acc/etc. 2) Once a customer creates an account the Skycharge Cloud, admin requests from the customer 'user-uuid' (taken from the skycharge.conf or generated) and email i.e: email: demo@demo.demo user-uuid: 00000000-0000-0000-0000-000000000000 1) Connect to the skybroker host: ssh -i skycharge-amazon.pem admin@install.skycharge.de 2) Start MongoDB client on the skybroker host: mongosh mongodb://172.31.45.75/skycharge_db 5) Find ObjectId by the customer email: db.users.find ({ email: 'demo@demo.demo' } , { _id:true }) expected answer: [ { _id : Objec t Id( \"61a8811b391ad3e1a3755253\" ) } ] 6) Set ObjectId of the customer user to the userUUID collection searching by the 'user-uuid': db . userUUIDS . updateOne ( { userUUID : ` 00000000 - 0000 - 0000 - 0000 - 000000000000 ` } , { $ set : { userId : ObjectId ( ` 61 a8811b391ad3e1a3755253 ` ) } } ) expected response: { ack n owledged : true , i nserte dId : null , ma t chedCou nt : 1 , modi f iedCou nt : 1 , upser te dCou nt : 0 } The client should have access to SDK after successful updating the database. To leave mongo shell: quit () or use the Ctrl-C shortcut. Test curl 'https://api.skycharge.de/v1/devs-list?user-uuid=00000000-0000-0000-0000-000000000000' Usefull mongodb commands List of users: db . users . find () Print a list of all collections for current database: db . getCollectionNames ()","title":"Authenticating SDK"},{"location":"sdk-auth/#customer-registration","text":"Skycharge broker has an authentication mechanism for all remote clients, so all customers who need access to the Skycharge cloud SDK have to be registered explicitly and manually (there is no way to register a customer from the Skycharge web cloud unfortunately).","title":"Customer registration"},{"location":"sdk-auth/#procedure","text":"1) A customer has to create an account on the Skycharge Cloud with common procedure through the email/google acc/etc. 2) Once a customer creates an account the Skycharge Cloud, admin requests from the customer 'user-uuid' (taken from the skycharge.conf or generated) and email i.e: email: demo@demo.demo user-uuid: 00000000-0000-0000-0000-000000000000 1) Connect to the skybroker host: ssh -i skycharge-amazon.pem admin@install.skycharge.de 2) Start MongoDB client on the skybroker host: mongosh mongodb://172.31.45.75/skycharge_db 5) Find ObjectId by the customer email: db.users.find ({ email: 'demo@demo.demo' } , { _id:true }) expected answer: [ { _id : Objec t Id( \"61a8811b391ad3e1a3755253\" ) } ] 6) Set ObjectId of the customer user to the userUUID collection searching by the 'user-uuid': db . userUUIDS . updateOne ( { userUUID : ` 00000000 - 0000 - 0000 - 0000 - 000000000000 ` } , { $ set : { userId : ObjectId ( ` 61 a8811b391ad3e1a3755253 ` ) } } ) expected response: { ack n owledged : true , i nserte dId : null , ma t chedCou nt : 1 , modi f iedCou nt : 1 , upser te dCou nt : 0 } The client should have access to SDK after successful updating the database. To leave mongo shell: quit () or use the Ctrl-C shortcut.","title":"Procedure"},{"location":"sdk-auth/#test","text":"curl 'https://api.skycharge.de/v1/devs-list?user-uuid=00000000-0000-0000-0000-000000000000'","title":"Test"},{"location":"sdk-auth/#usefull-mongodb-commands","text":"List of users: db . users . find () Print a list of all collections for current database: db . getCollectionNames ()","title":"Usefull mongodb commands"},{"location":"tests/","text":"Test page Test page for testing, formating, tools, plugins etc. Revision date https://timvink.github.io/mkdocs-git-revision-date-localized-plugin/ Updated {{ page.meta.revision_date }} This page was last updated: {{ git_revision_date_localized }} Created: {{ page.meta.git_created_date_localized }} Flow charts Text based flow chart, more info here . En example below. graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; Notes test Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Success hurrraaaa! Failure buuuueeee! Icons :fontawesome-regular-face-laugh-wink: :fontawesome-abstract: Tabs Could be used for code snipets, code / expectd response C C++ #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } hints apt update # (1) I'm a code annotation! theme : features : - content.code.annotate # (1) :man_raising_hand: I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. Last update info This page was last updated: {{ git-revision-date-localized }}","title":"Tests"},{"location":"tests/#test-page","text":"Test page for testing, formating, tools, plugins etc.","title":"Test page"},{"location":"tests/#revision-date","text":"https://timvink.github.io/mkdocs-git-revision-date-localized-plugin/ Updated {{ page.meta.revision_date }} This page was last updated: {{ git_revision_date_localized }} Created: {{ page.meta.git_created_date_localized }}","title":"Revision date"},{"location":"tests/#flow-charts","text":"Text based flow chart, more info here . En example below. graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!];","title":"Flow charts"},{"location":"tests/#notes-test","text":"Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Success hurrraaaa! Failure buuuueeee!","title":"Notes test"},{"location":"tests/#icons","text":":fontawesome-regular-face-laugh-wink: :fontawesome-abstract:","title":"Icons"},{"location":"tests/#tabs","text":"Could be used for code snipets, code / expectd response C C++ #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Tabs"},{"location":"tests/#hints","text":"apt update # (1) I'm a code annotation! theme : features : - content.code.annotate # (1) :man_raising_hand: I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown.","title":"hints"},{"location":"tests/#last-update-info","text":"This page was last updated: {{ git-revision-date-localized }}","title":"Last update info"},{"location":"tmux/","text":"Splitting screen in terminal The purpose of splitting terminal screen is to see on one terminal window two panes with skycharge-cli monitor and skycharge-cli show-dev-params at the same time for demo. Installing tmux sudo apt-get install tmux Usefull Commands list Creat a new session (window): tmux new -s [ session_name ] Exit session: exit List existingrunning sessions: tmux ls Connecting to a running session tmux attach -t 0 Pane Handling By default, the prefix is CTRL+B followed by a command. Split panes vertically Ctrl + B + % Split panes horizontally Ctrl + B + \" Toggle last active plane Ctrl + B + ; Swap panes Ctrl + B + o Kill pane Ctrl + B + x Show pane numbers Ctrl + B + q Move plan left Ctrl + B + { Move plan right Ctrl + B + } Switching between panes Ctrl + B + arrow key To open a new session called Skycharge run: tmux new -s Skycharge split it horizontaly: Ctrl + B + % \\ move between panes: Ctrl + B + arrow key Script for split and call Skycharge cli commands: #!/bin/sh tmux new -d -s Skycharge tmux send -t Skycharge \"skycharge-cli monitor\" ENTER tmux split-window -v tmux send -t Skycharge.1 \"skycharge-cli show-dev-params\" ENTER tmux attach -t Skycharge To exit and close panes run: Ctrl + B + x \\ Ctrl + B + x","title":"BB terminal split"},{"location":"tmux/#splitting-screen-in-terminal","text":"The purpose of splitting terminal screen is to see on one terminal window two panes with skycharge-cli monitor and skycharge-cli show-dev-params at the same time for demo.","title":"Splitting screen in terminal"},{"location":"tmux/#installing-tmux","text":"sudo apt-get install tmux","title":"Installing tmux"},{"location":"tmux/#usefull-commands-list","text":"Creat a new session (window): tmux new -s [ session_name ] Exit session: exit List existingrunning sessions: tmux ls Connecting to a running session tmux attach -t 0","title":"Usefull Commands list"},{"location":"tmux/#pane-handling","text":"By default, the prefix is CTRL+B followed by a command. Split panes vertically Ctrl + B + % Split panes horizontally Ctrl + B + \" Toggle last active plane Ctrl + B + ; Swap panes Ctrl + B + o Kill pane Ctrl + B + x Show pane numbers Ctrl + B + q Move plan left Ctrl + B + { Move plan right Ctrl + B + } Switching between panes Ctrl + B + arrow key To open a new session called Skycharge run: tmux new -s Skycharge split it horizontaly: Ctrl + B + % \\ move between panes: Ctrl + B + arrow key","title":"Pane Handling"},{"location":"tmux/#script-for-split-and-call-skycharge-cli-commands","text":"#!/bin/sh tmux new -d -s Skycharge tmux send -t Skycharge \"skycharge-cli monitor\" ENTER tmux split-window -v tmux send -t Skycharge.1 \"skycharge-cli show-dev-params\" ENTER tmux attach -t Skycharge To exit and close panes run: Ctrl + B + x \\ Ctrl + B + x","title":"Script for split and call Skycharge cli commands:"}]}